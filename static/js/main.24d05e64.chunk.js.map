{"version":3,"sources":["AuthorQuiz.js","AddAuthorForm.js","serviceWorker.js","index.js"],"names":["Hero","className","Book","title","onClick","Turn","author","books","highlight","onAnswerSelected","style","backgroundColor","highlightToBgColor","src","imageUrl","alt","map","key","Continue","show","onContinue","Footer","id","href","AuthorQuiz","turnData","to","AuthorFrom","props","state","name","bookTemp","onFieldChange","bind","handleSubmit","handleAddBook","event","preventDefault","this","onAddAuthor","setState","target","value","concat","onSubmit","htmlFor","type","onChange","book","React","Component","AddAuthorForm","match","classname","Boolean","window","location","hostname","authors","imageSource","imageAttribution","getTurnData","allBooks","reduce","p","c","i","fourRandomBooks","shuffle","slice","answer","sample","find","some","resetState","isCorrect","render","App","AuthorWrapper","withRouter","history","push","ReactDOM","Fragment","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAOA,SAASA,IACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,6BACb,2CACA,4EAOR,SAASC,EAAT,GAAgC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,QACpB,OACE,yBAAKH,UAAU,SAASG,QAAS,WAAKA,EAAQD,KAC5C,4BAAKA,IAMX,SAASE,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,iBAWrC,OAAQ,yBAAKR,UAAU,WAAWS,MAAO,CAACC,gBAT1C,SAA4BH,GAM1B,MALgB,CACd,KAAO,GACP,QAAU,QACV,MAAQ,OAEKA,GAGyCI,CAAmBJ,KAC3E,yBAAKP,UAAU,kBACb,yBAAKY,IAAKP,EAAOQ,SAAUb,UAAU,cAAcc,IAAI,YAEzD,yBAAKd,UAAU,SACZM,EAAMS,KAAI,SAACb,GAAD,OAAW,kBAACD,EAAD,CAAMC,MAAOA,EAAOc,IAAKd,EAAOC,QAASK,SAiBvE,SAASS,EAAT,GAAsC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,WACvB,OAAQ,yBAAKnB,UAAU,gBAEnBkB,EACA,yBAAKlB,UAAU,UACb,4BAAQA,UAAU,qCAAqCG,QAASgB,GAAhE,aAIA,MAMR,SAASC,IACP,OAAQ,yBAAKC,GAAG,SAASrB,UAAU,OACjC,yBAAKA,UAAU,sBACb,uBAAGA,UAAU,qBAAb,uBACA,uBAAGsB,KAAK,+CAAR,qBADA,mCAoBSC,MAZf,YAAwE,IAAnDC,EAAkD,EAAlDA,SAASjB,EAAyC,EAAzCA,UAAUC,EAA+B,EAA/BA,iBAAkBW,EAAa,EAAbA,WACxD,OACE,yBAAKnB,UAAU,mBACb,kBAACD,EAAD,MACA,kBAACK,EAAD,iBAAUoB,EAAV,CAAoBjB,UAAWA,EAAWC,iBAAkBA,KAC5D,kBAACS,EAAD,CAAUC,KAAoB,YAAdX,EAAyBY,WAAYA,IACrD,2BAAG,kBAAC,IAAD,CAAMM,GAAG,QAAT,kBACH,kBAACL,EAAD,Q,+CC1FAM,G,wDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNhB,SAAU,GACVP,MAAO,GACPwB,SAAU,IAEd,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAVP,E,yDAYLG,GACTA,EAAMC,iBACNC,KAAKV,MAAMW,YAAYD,KAAKT,S,oCAElBO,GACVE,KAAKE,SAAL,eACKJ,EAAMK,OAAOX,KAAOM,EAAMK,OAAOC,U,oCAG5BN,GACVE,KAAKE,SAAS,CACVjC,MAAO+B,KAAKT,MAAMtB,MAAMoC,OAAO,CAACL,KAAKT,MAAME,WAC3CA,SAAS,O,+BAKb,OACA,0BAAOa,SAAUN,KAAKJ,cAClB,yBAAKjC,UAAU,wBACX,2BAAO4C,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOhB,KAAK,OAAOY,MAAOJ,KAAKT,MAAMC,KAAMiB,SAAUT,KAAKN,iBAE1E,yBAAK/B,UAAU,wBACf,2BAAO4C,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOhB,KAAK,WAAWY,MAAOJ,KAAKT,MAAMf,SAAUiC,SAAUT,KAAKN,iBAE9E,yBAAK/B,UAAU,uBACX,2BAAO4C,QAAQ,YAAf,SACCP,KAAKT,MAAMtB,MAAMS,KAAI,SAACgC,GAAD,OAAU,uBAAG/B,IAAK+B,GAAOA,MAC/C,2BAAOF,KAAK,OAAOhB,KAAK,WAAWY,MAAOJ,KAAKT,MAAME,SAAUgB,SAAUT,KAAKN,gBAC9E,2BAAOc,KAAK,SAASJ,MAAM,IAAItC,QAASkC,KAAKH,iBAEjD,2BAAOW,KAAK,SAASJ,MAAM,a,GA9CdO,IAAMC,YA+DhBC,MAXf,YAA4C,EAApBC,MAAqB,IAAdb,EAAa,EAAbA,YAC3B,OACI,yBAAKc,UAAU,iBACX,yBAAKpD,UAAU,kBACX,0CACA,kBAAC,EAAD,CAAYsC,YAAaA,OCjDrBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2D,YCTAM,EAAU,CACd,CACE5B,KAAM,aACNhB,SAAU,+BACV6C,YAAa,oBACbpD,MAAO,CAAC,uCAEV,CACEuB,KAAM,gBACNhB,SAAU,kCACV6C,YAAa,oBACbpD,MAAO,CAAC,sBAEV,CACEuB,KAAM,eACNhB,SAAU,+BACV6C,YAAa,oBACbC,iBAAkB,eAClBrD,MAAO,CAAC,yCAEV,CACEuB,KAAM,eACNhB,SAAU,iCACV6C,YAAa,oBACbC,iBAAkB,WAClBrD,MAAO,CAAC,cAAe,OAEzB,CACEuB,KAAM,kBACNhB,SAAU,oCACV6C,YAAa,oBACbpD,MAAO,CAAC,oBAAqB,yBAE/B,CACEuB,KAAM,sBACNhB,SAAU,wCACV6C,YAAa,oBACbpD,MAAO,CAAC,SAAU,UAAW,sBAIjC,SAASsD,EAAYH,GACnB,IAAMI,EAAWJ,EAAQK,QAAO,SAAUC,EAAGC,EAAGC,GAC5C,OAAOF,EAAErB,OAAOsB,EAAE1D,SACnB,IACG4D,EAAkBC,YAAQN,GAAUO,MAAM,EAAE,GAC5CC,EAASC,YAAOJ,GACtB,MAAM,CACJ5D,MAAM4D,EACN7D,OAAQoD,EAAQc,MAAK,SAAClE,GAAD,OACrBA,EAAOC,MAAMkE,MAAK,SAACtE,GAAD,OAClBA,IAAUmE,SAKd,SAASI,IACP,MAAO,CACLjD,SAAUoC,EAAYH,GACtBlD,UAAU,IAGd,IAAIqB,EAAQ6C,IAEZ,SAASjE,EAAiB6D,GACxB,IAAMK,EAAY9C,EAAMJ,SAASnB,OAAOC,MAAMkE,MAC5C,SAACzB,GAAD,OAAUA,IAASsB,KACnBzC,EAAMrB,UAAYmE,EAAY,UAAW,QACzCC,IAGJ,SAASC,IACP,OAAQ,kBAAC,EAAD,iBAAgBhD,EAAhB,CACRpB,iBAAkBA,EAClBW,WAAY,WACRS,EAAQ6C,IACRE,QAGN,IAAME,EAAgBC,aAAW,gBAAEC,EAAF,EAAEA,QAAF,OAC/B,kBAAC,EAAD,CAAezC,YAAa,SAACjC,GAC3BoD,EAAQuB,KAAK3E,GACb0E,EAAQC,KAAK,WAMjB,SAASL,IACPM,IAASN,OACP,kBAAC,IAAD,KACA,kBAAC,IAAMO,SAAP,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,OAAOC,UAAWR,MAGhCS,SAASC,eAAe,SAG5BZ,IDuBM,kBAAmBa,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24d05e64.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport './AuthorQuiz.css';\nimport './bootstrap.min.css';\n\n// The hero par \nfunction Hero(){\n  return (\n    <div className=\"row\"> \n      <div className=\"jumbotron col-10 offset-1\">\n        <h1>Author Quiz</h1>\n        <p>Select the book written by the author shown</p>\n      </div>\n    </div>\n  );\n}\n\n// Add the book componenet \nfunction Book({title, onClick}){\n  return (\n    <div className=\"answer\" onClick={()=>{onClick(title);}}>\n      <h4>{title}</h4>\n    </div>\n  );\n}\n\n// Add turn compoenent that will render random questions\nfunction Turn({author, books, highlight, onAnswerSelected}){\n    // Add the function that map the starte of the answer to corespondant color\n    function highlightToBgColor(highlight){\n      const mapping = {\n        'none':'',\n        'correct':'green',\n        'wrong':'red'\n      };\n      return mapping[highlight];\n    }\n\n    return (<div className=\"row turn\" style={{backgroundColor:highlightToBgColor(highlight)}}>\n      <div className=\"col-4 offset-1\">\n        <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\"></img>\n      </div>\n      <div className=\"col-6\"> \n        {books.map((title) => <Book title={title} key={title} onClick={onAnswerSelected} />)}\n      </div>\n    </div>);\n}\n// Add validation layer\nTurn.propTypes = {\n  author: propTypes.shape({\n    name: propTypes.string.isRequired,\n    imageUrl: propTypes.string.isRequired,\n    imageSource: propTypes.string.isRequired,\n    books: propTypes.arrayOf(propTypes.string).isRequired\n  }),\n  books: propTypes.arrayOf(propTypes.string).isRequired,\n  onAnswerSelected: propTypes.func.isRequired,\n  highlight: propTypes.string.isRequired\n};\n// Add continue compoenent\nfunction Continue({show, onContinue}){\n  return (<div className=\"row continue\">\n    {\n      show ? \n      <div className=\"col-11\">\n        <button className=\"btn btn-primary btn-lg float-right\" onClick={onContinue}>\n          Continue\n        </button>\n      </div>\n      : null\n    }\n  </div>);\n}\n\n// Add the footer\nfunction Footer(){\n  return (<div id=\"footer\" className='row'>\n    <div className=\"col-12 text-center\">\n      <p className=\"text-muted credit\"> All images are from\n      <a href=\"http://commons.wikimedia.org/wiki/Main_Page\">Wikemedia Commons</a> and are in the public domain\n      </p>  \n    </div>\n  </div>);\n}\n\n// The Author Quiz global component \nfunction AuthorQuiz({turnData,highlight,onAnswerSelected, onContinue}) {\n  return (\n    <div className=\"container-fluid\">\n      <Hero></Hero>\n      <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected}></Turn>\n      <Continue show={highlight === 'correct'} onContinue={onContinue}></Continue>\n      <p><Link to=\"/add\">Add an author</Link></p>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default AuthorQuiz;\n\n\n","import React from 'react';\r\nimport \"./AddAuthorForm.css\"\r\n\r\n\r\nclass AuthorFrom extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageUrl: '',\r\n            books: [],\r\n            bookTemp: ''\r\n        };\r\n        this.onFieldChange = this.onFieldChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleAddBook = this.handleAddBook.bind(this);\r\n    }\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.props.onAddAuthor(this.state);\r\n    }\r\n    onFieldChange(event){\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    handleAddBook(event){\r\n        this.setState({\r\n            books: this.state.books.concat([this.state.bookTemp]),\r\n            bookTemp:''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <form  onSubmit={this.handleSubmit}>\r\n            <div className=\"AddAuthorForm__input\">\r\n                <lable htmlFor=\"name\">Name</lable>\r\n                <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onFieldChange}></input>\r\n            </div>\r\n            <div className=\"AddAuthorForm__input\">\r\n            <label htmlFor=\"imageUrl\">Image URL</label>\r\n            <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} onChange={this.onFieldChange} />\r\n            </div>\r\n            <div className=\"AddAuthorForm_input\">\r\n                <label htmlFor=\"bookTemp\">Books</label>\r\n                {this.state.books.map((book) => <p key={book}>{book}</p>)}\r\n                <input type=\"text\" name=\"bookTemp\" value={this.state.bookTemp} onChange={this.onFieldChange}></input>\r\n                <input type=\"button\" value=\"+\" onClick={this.handleAddBook}></input>\r\n            </div>\r\n            <input type=\"submit\" value=\"Add\"/>\r\n        </form>\r\n        );\r\n    }\r\n}\r\n\r\nfunction AddAuthorForm({match, onAddAuthor}){\r\n    return(\r\n        <div classname=\"AddAuthorForm\">\r\n            <div className=\"container mt-5\">\r\n                <h1>Add Author</h1>\r\n                <AuthorFrom onAddAuthor={onAddAuthor}></AuthorFrom>\r\n            </div>\r\n        </div>\r\n    );\r\n}    \r\n\r\nexport default AddAuthorForm;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, withRouter} from 'react-router-dom';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\nimport AddAuthorForm from './AddAuthorForm';\nimport * as serviceWorker from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\n// add author list \nconst authors = [\n  {\n    name: 'Mark Twain',\n    imageUrl: 'images/authors/marktwain.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['The Adventures of Huckleberry Finn']\n  },\n  {\n    name: 'Joseph Conrad',\n    imageUrl: 'images/authors/josephconrad.png',\n    imageSource: 'Wikimedia Commons',\n    books: ['Heart of Darkness']\n  },\n  {\n    name: 'J.K. Rowling',\n    imageUrl: 'images/authors/jkrowling.jpg',\n    imageSource: 'Wikimedia Commons',\n    imageAttribution: 'Daniel Ogren',\n    books: ['Harry Potter and the Sorcerers Stone']\n  },\n  {\n    name: 'Stephen King',\n    imageUrl: 'images/authors/stephenking.jpg',\n    imageSource: 'Wikimedia Commons',\n    imageAttribution: 'Pinguino',\n    books: ['The Shining', 'IT']\n  },\n  {\n    name: 'Charles Dickens',\n    imageUrl: 'images/authors/charlesdickens.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['David Copperfield', 'A Tale of Two Cities']\n  },\n  {\n    name: 'William Shakespeare',\n    imageUrl: 'images/authors/williamshakespeare.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']\n  }\n];\n\nfunction getTurnData(authors){\n  const allBooks = authors.reduce(function (p, c, i) {\n      return p.concat(c.books);\n  }, []);\n  const fourRandomBooks = shuffle(allBooks).slice(0,4);\n  const answer = sample(fourRandomBooks);\n  return{\n    books:fourRandomBooks,\n    author: authors.find((author) => \n    author.books.some((title) => \n    title === answer))\n  }\n}\n\n// Refrech the state for every correct answer \nfunction resetState(){\n  return {\n    turnData: getTurnData(authors),\n    highlight:''\n  };\n}\nlet state = resetState();\n\nfunction onAnswerSelected(answer){\n  const isCorrect = state.turnData.author.books.some(\n    (book) => book === answer);\n    state.highlight = isCorrect ? 'correct': 'wrong';\n    render();\n}\n\nfunction App(){\n  return (<AuthorQuiz {...state} \n  onAnswerSelected={onAnswerSelected}\n  onContinue={() => {\n      state = resetState();\n      render();\n    }}/>);\n}\nconst AuthorWrapper = withRouter(({history}) =>\n  <AddAuthorForm onAddAuthor={(author) => {\n    authors.push(author);\n    history.push('/');\n  }}>\n\n  </AddAuthorForm>\n);\n\nfunction render(){\n  ReactDOM.render(\n    <BrowserRouter>\n    <React.Fragment>\n      <Route exact path=\"/\" component={App}></Route>\n      <Route path=\"/add\" component={AuthorWrapper}></Route>\n    </React.Fragment>\n    </BrowserRouter>,\n    document.getElementById('root')\n  );\n}\nrender();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}