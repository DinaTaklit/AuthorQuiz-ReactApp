{"version":3,"sources":["AuthorQuiz.js","serviceWorker.js","index.js"],"names":["Hero","className","Book","title","onClick","Turn","author","books","highlight","onAnswerSelected","style","backgroundColor","highlightToBgColor","src","imageUrl","alt","map","key","Continue","show","onContinue","Footer","id","href","AuthorQuiz","turnData","to","Boolean","window","location","hostname","match","authors","name","imageSource","imageAttribution","getTurnData","allBooks","reduce","p","c","i","concat","fourRandomBooks","shuffle","slice","answer","sample","find","some","resetState","state","isCorrect","book","render","App","ReactDOM","Fragment","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d619796b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport './AuthorQuiz.css';\nimport './bootstrap.min.css';\n\n// The hero par \nfunction Hero(){\n  return (\n    <div className=\"row\"> \n      <div className=\"jumbotron col-10 offset-1\">\n        <h1>Author Quiz</h1>\n        <p>Select the book written by the author shown</p>\n      </div>\n    </div>\n  );\n}\n\n// Add the book componenet \nfunction Book({title, onClick}){\n  return (\n    <div className=\"answer\" onClick={()=>{onClick(title);}}>\n      <h4>{title}</h4>\n    </div>\n  );\n}\n\n// Add turn compoenent that will render random questions\nfunction Turn({author, books, highlight, onAnswerSelected}){\n    // Add the function that map the starte of the answer to corespondant color\n    function highlightToBgColor(highlight){\n      const mapping = {\n        'none':'',\n        'correct':'green',\n        'wrong':'red'\n      };\n      return mapping[highlight];\n    }\n\n    return (<div className=\"row turn\" style={{backgroundColor:highlightToBgColor(highlight)}}>\n      <div className=\"col-4 offset-1\">\n        <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\"></img>\n      </div>\n      <div className=\"col-6\"> \n        {books.map((title) => <Book title={title} key={title} onClick={onAnswerSelected} />)}\n      </div>\n    </div>);\n}\n// Add validation layer\nTurn.propTypes = {\n  author: propTypes.shape({\n    name: propTypes.string.isRequired,\n    imageUrl: propTypes.string.isRequired,\n    imageSource: propTypes.string.isRequired,\n    books: propTypes.arrayOf(propTypes.string).isRequired\n  }),\n  books: propTypes.arrayOf(propTypes.string).isRequired,\n  onAnswerSelected: propTypes.func.isRequired,\n  highlight: propTypes.string.isRequired\n};\n// Add continue compoenent\nfunction Continue({show, onContinue}){\n  return (<div className=\"row continue\">\n    {\n      show ? \n      <div className=\"col-11\">\n        <button className=\"btn btn-primary btn-lg float-right\" onClick={onContinue}>\n          Continue\n        </button>\n      </div>\n      : null\n    }\n  </div>);\n}\n\n// Add the footer\nfunction Footer(){\n  return (<div id=\"footer\" className='row'>\n    <div className=\"col-12 text-center\">\n      <p className=\"text-muted credit\"> All images are from\n      <a href=\"http://commons.wikimedia.org/wiki/Main_Page\">Wikemedia Commons</a> and are in the public domain\n      </p>  \n    </div>\n  </div>);\n}\n\n// The Author Quiz global component \nfunction AuthorQuiz({turnData,highlight,onAnswerSelected, onContinue}) {\n  return (\n    <div className=\"container-fluid\">\n      <Hero></Hero>\n      <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected}></Turn>\n      <Continue show={highlight === 'correct'} onContinue={onContinue}></Continue>\n      <p><Link to=\"/add\">Add an author</Link></p>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default AuthorQuiz;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route, withRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport AuthorQuiz from './AuthorQuiz';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {shuffle, sample} from 'underscore';\r\n// add author list \r\nconst authors = [\r\n  {\r\n    name: 'Mark Twain',\r\n    imageUrl: 'images/authors/marktwain.jpg',\r\n    imageSource: 'Wikimedia Commons',\r\n    books: ['The Adventures of Huckleberry Finn']\r\n  },\r\n  {\r\n    name: 'Joseph Conrad',\r\n    imageUrl: 'images/authors/josephconrad.png',\r\n    imageSource: 'Wikimedia Commons',\r\n    books: ['Heart of Darkness']\r\n  },\r\n  {\r\n    name: 'J.K. Rowling',\r\n    imageUrl: 'images/authors/jkrowling.jpg',\r\n    imageSource: 'Wikimedia Commons',\r\n    imageAttribution: 'Daniel Ogren',\r\n    books: ['Harry Potter and the Sorcerers Stone']\r\n  },\r\n  {\r\n    name: 'Stephen King',\r\n    imageUrl: 'images/authors/stephenking.jpg',\r\n    imageSource: 'Wikimedia Commons',\r\n    imageAttribution: 'Pinguino',\r\n    books: ['The Shining', 'IT']\r\n  },\r\n  {\r\n    name: 'Charles Dickens',\r\n    imageUrl: 'images/authors/charlesdickens.jpg',\r\n    imageSource: 'Wikimedia Commons',\r\n    books: ['David Copperfield', 'A Tale of Two Cities']\r\n  },\r\n  {\r\n    name: 'William Shakespeare',\r\n    imageUrl: 'images/authors/williamshakespeare.jpg',\r\n    imageSource: 'Wikimedia Commons',\r\n    books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']\r\n  }\r\n];\r\n\r\nfunction getTurnData(authors){\r\n  const allBooks = authors.reduce(function (p, c, i) {\r\n      return p.concat(c.books);\r\n  }, []);\r\n  const fourRandomBooks = shuffle(allBooks).slice(0,4);\r\n  const answer = sample(fourRandomBooks);\r\n  return{\r\n    books:fourRandomBooks,\r\n    author: authors.find((author) => \r\n    author.books.some((title) => \r\n    title === answer))\r\n  }\r\n}\r\n\r\n// Refrech the state for every correct answer \r\nfunction resetState(){\r\n  return {\r\n    turnData: getTurnData(authors),\r\n    highlight:''\r\n  };\r\n}\r\nlet state = resetState();\r\n\r\nfunction onAnswerSelected(answer){\r\n  const isCorrect = state.turnData.author.books.some(\r\n    (book) => book === answer);\r\n    state.highlight = isCorrect ? 'correct': 'wrong';\r\n    render();\r\n}\r\n\r\nfunction App(){\r\n  return (<AuthorQuiz {...state} \r\n  onAnswerSelected={onAnswerSelected}\r\n  onContinue={() => {\r\n      state = resetState();\r\n      render();\r\n    }}/>);\r\n}\r\n\r\nfunction render(){\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n    <React.Fragment>\r\n      <Route exact path=\"/AuthorQuiz-ReactApp\" component={App}></Route>\r\n    </React.Fragment>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\nrender();\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}